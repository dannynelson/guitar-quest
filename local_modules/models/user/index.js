// Generated by CoffeeScript 1.10.0
(function() {
  var JSONSchema, JSONSchemaConverter, Promise, _, database, joi, levelHelper, model, mongoose, normalizeEmail, passportLocalMongoose, schema;

  mongoose = require('mongoose');

  joi = require('joi');

  _ = require('lodash');

  Promise = require('bluebird');

  normalizeEmail = require('normalize-email');

  passportLocalMongoose = require('passport-local-mongoose');

  JSONSchemaConverter = require('goodeggs-json-schema-converter');

  JSONSchema = require('./schema');

  database = require('local_modules/database');

  levelHelper = require('local_modules/level');

  schema = JSONSchemaConverter.toMongooseSchema(JSONSchema, mongoose);

  schema.plugin(require('mongoose-timestamp'));

  schema.plugin(passportLocalMongoose, {
    usernameField: 'emailId'
  });

  schema.methods.addPoints = Promise.method(function(points) {
    var Notification, newLevel;
    Notification = require('local_modules/models/notification');
    joi.assert(points, joi.number().integer().required(), 'points');
    this.points += points;
    newLevel = levelHelper.calculateCurrentLevel(this.points);
    if (newLevel > this.level) {
      this.level = newLevel;
      Notification.createNew('levelUp', {
        user: this
      });
    }
    return this.save();
  });

  require('./hooks')(schema);

  schema.pre('save', function(next) {
    if (this.isModified('email')) {
      this.emailId = normalizeEmail(this.email);
    }
    return next();
  });

  model = database.mongooseConnection.model('User', schema);

  module.exports = model;

}).call(this);
