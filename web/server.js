// Generated by CoffeeScript 1.10.0
(function() {
  var MongoStore, _, app, assets, async, bodyParser, clientSettingsWhitelist, crashpad, database, enforce, express, helmet, i, len, logger, passport, path, server, session, settingPath, settings, sharedSettings;

  _ = require('lodash');

  express = require('express');

  bodyParser = require('body-parser');

  session = require('express-session');

  MongoStore = require('connect-mongo')(session);

  helmet = require('helmet');

  crashpad = require('crashpad');

  async = require('async');

  path = require('path');

  logger = require('local_modules/logger');

  database = require('local_modules/database');

  settings = require('local_modules/settings');

  passport = require('local_modules/passport');

  enforce = require('express-sslify');

  server = null;

  module.exports = app = express();

  if (settings.env === 'production') {
    app.use(enforce.HTTPS({
      trustProtoHeader: true
    }));
  }

  app.locals.assets = assets = require('local_modules/ui_assets')({
    settings: settings
  });

  app.use(assets.middleware());

  app.use(require('cookie-parser')());

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  app.use(bodyParser.json());

  app.use(helmet.hidePoweredBy());

  app.use(helmet.ieNoOpen());

  app.use(helmet.noSniff());

  app.use(helmet.xssFilter());

  app.use(helmet.frameguard());

  app.use(helmet.noCache());

  app.set('view engine', 'jade');

  app.set('views', path.resolve(process.cwd(), 'web'));

  if (settings.env === 'production') {
    app.set('trust proxy', 1);
  }

  app.use(session({
    secret: 'julian bream',
    store: new MongoStore({
      url: settings.mongo.url
    }),
    cookie: {
      secure: settings.env === 'production' ? true : void 0
    }
  }));

  app.use(passport.initialize());

  app.use(passport.session());

  app.use('/users', require('./users'));

  app.use('/notifications', require('./notifications'));

  app.use('/challenges', require('./challenges'));

  app.use('/pieces', require('./pieces'));

  app.use('/user_pieces', require('./user_pieces'));

  app.use('/s3_policy', require('./s3_policy'));

  clientSettingsWhitelist = _.union(clientSettingsWhitelist, ['env', 'stripe.publishableKey', 'server.url', 'subscription.price']);

  sharedSettings = {};

  for (i = 0, len = clientSettingsWhitelist.length; i < len; i++) {
    settingPath = clientSettingsWhitelist[i];
    _.set(sharedSettings, settingPath, _.get(settings, settingPath));
  }

  app.get('*', function(req, res, next) {
    res.locals.sharedSettings = sharedSettings;
    return res.render('layout');
  });

  app.use(function(err, req, res, next) {
    logger.error(err, "internal server error: " + err.message);
    return next();
  });

  app.use(crashpad());


  /* other middlewares could hook here w/ sub-app/router */

  app.connect = function(cb) {
    return async.parallel([
      function(next) {
        if (database != null) {
          return database.connect(next);
        } else {
          return next();
        }
      }, function(next) {
        return next();
      }
    ], cb);
  };

  app.disconnect = function(cb) {
    return cb();
  };

  app.start = function(cb) {
    return app.connect(function(err) {
      if (err != null) {
        return cb(err);
      }
      if (assets != null) {
        assets.reload();
      }
      server = app.listen(settings.server.port, settings.server.bind);
      return server.once('listening', function() {
        logger.info(settings.name + " is listening at " + (server.address().address) + ":" + (server.address().port) + " in " + settings.env + " mode");
        return typeof cb === "function" ? cb() : void 0;
      });
    });
  };

  app.stop = function(cb) {
    if (server != null) {
      server.close();
    }
    return app.disconnect(cb);
  };

  return app;

}).call(this);
