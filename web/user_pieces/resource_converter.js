// Generated by CoffeeScript 1.10.0
(function() {
  var Piece, ResourceSchema, User, UserPiece, _, schema;

  _ = require('lodash');

  ResourceSchema = require('resource-schema');

  UserPiece = require('local_modules/models/user_piece');

  Piece = require('local_modules/models/piece');

  User = require('local_modules/models/user');

  schema = Object.keys(UserPiece.schema.paths).reduce(function(obj, path) {
    if (path !== 'history') {
      obj[path] = path;
    }
    return obj;
  }, {});

  _.extend(schema, {
    'user': {
      optional: true,
      get: function(userPiece, arg) {
        var usersById;
        usersById = arg.usersById;
        return usersById[userPiece.userId.toString()];
      },
      resolve: {
        usersById: function(arg, done) {
          var models, userPieces;
          models = arg.models;
          userPieces = models;
          return User.find({
            _id: {
              $in: userPieces.map(function(userPiece) {
                return userPiece.userId;
              })
            }
          }).select('name email').exec().then(function(users) {
            var usersById;
            usersById = _.indexBy(users, '_id');
            return done(null, usersById);
          }).then(null, function(err) {
            throw err;
          });
        }
      }
    },
    'piece': {
      optional: true,
      get: function(userPiece, arg) {
        var piecesById;
        piecesById = arg.piecesById;
        return piecesById[userPiece.pieceId.toString()];
      },
      resolve: {
        piecesById: function(arg, done) {
          var models, userPieces;
          models = arg.models;
          userPieces = models;
          return Piece.find({
            _id: {
              $in: userPieces.map(function(userPiece) {
                return userPiece.pieceId;
              })
            }
          }).select('name').exec().then(function(pieces) {
            var piecesById;
            piecesById = _.indexBy(pieces, '_id');
            return done(null, piecesById);
          }).then(null, function(err) {
            throw err;
          });
        }
      }
    },
    'historyChanges': {
      optional: true,
      get: function(model) {
        return new UserPiece(model).historyChanges || [];
      }
    },
    'updatedBy': {
      field: 'updatedBy',
      set: function(value, arg) {
        var next, req, res;
        req = arg.req, res = arg.res, next = arg.next;
        return req.user._id;
      }
    }
  });

  module.exports = new ResourceSchema(UserPiece, schema);

}).call(this);
