// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, UserPiece, joi, passport, resourceConverter, router;

  Promise = require('bluebird');

  joi = require('joi');

  joi.objectId = require('joi-objectid')(joi);

  UserPiece = require('local_modules/models/user_piece');

  passport = require('local_modules/passport');

  resourceConverter = require('./resource_converter');

  module.exports = router = require('express').Router();

  router.get('/', resourceConverter.get(), resourceConverter.send);

  router.get('/:_id', resourceConverter.get('_id'), resourceConverter.send);

  router.post('/:_id/submit_video', function(req, res, next) {
    if (req.user == null) {
      return res.status(401).send('unauthorized');
    }
    if (joi.validate(req.params._id, joi.objectId().required()).error) {
      return res.status(400).send('invalid userPieceId');
    }
    if (joi.validate(req.body.pieceId, joi.objectId().required()).error) {
      return res.status(400).send('invalid pieceId');
    }
    if (joi.validate(req.body.submissionVideoURL, joi.string().required()).error) {
      return res.status(400).send('invalid submissionVideoURL');
    }
    return UserPiece.findById(req.params._id).then((function(_this) {
      return function(userPiece) {
        if (userPiece == null) {
          userPiece = new UserPiece({
            _id: req.params._id,
            userId: req.user._id,
            pieceId: req.body.pieceId
          });
        }
        return userPiece.submitVideo({
          submissionVideoURL: req.body.submissionVideoURL,
          updatedBy: req.user._id.toString()
        });
      };
    })(this)).then((function(_this) {
      return function(userPiece) {
        req.query.$add = ['historyChanges'];
        return resourceConverter.createResourceFromModel(userPiece, {
          req: req,
          res: res,
          next: next
        });
      };
    })(this)).then((function(_this) {
      return function(userPieceResource) {
        res.body = userPieceResource;
        return next();
      };
    })(this));
  }, resourceConverter.send);

  router.post('/:_id/grade', function(req, res, next) {
    if (req.user == null) {
      res.status(401).send('unauthorized');
    }
    return UserPiece.findById(req.params._id).then((function(_this) {
      return function(userPiece) {
        return userPiece.gradePiece({
          grade: req.body.grade,
          comment: req.body.comment,
          updatedBy: req.user._id.toString()
        });
      };
    })(this)).then((function(_this) {
      return function(userPiece) {
        req.query.$add = ['historyChanges'];
        return resourceConverter.createResourceFromModel(userPiece, {
          req: req,
          res: res,
          next: next
        });
      };
    })(this)).then((function(_this) {
      return function(userPieceResource) {
        res.body = userPieceResource;
        return next();
      };
    })(this));
  }, resourceConverter.send);

}).call(this);
