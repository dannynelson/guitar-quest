// Generated by CoffeeScript 1.10.0
(function() {
  var Challenge, Notification, Piece, Promise, TempUser, User, UserPiece, _, database, guitarQuestUrl, objectIdString, pieceFactory, request, settings, sinon, superAgentRequest, tempUserFactory, userFactory, userPieceFactory;

  require('local_modules/test_helpers/server');

  settings = require('local_modules/settings');

  _ = require('lodash');

  Promise = require('bluebird');

  request = Promise.promisifyAll(require('request'), {
    suffix: 'Promised'
  });

  sinon = require('sinon');

  Promise = require('bluebird');

  objectIdString = require('objectid');

  database = require('local_modules/database');

  User = require('local_modules/models/user');

  TempUser = require('local_modules/models/temp_user');

  Piece = require('local_modules/models/piece');

  User = require('local_modules/models/user');

  UserPiece = require('local_modules/models/user_piece');

  Notification = require('local_modules/models/notification');

  Challenge = require('local_modules/models/challenge');

  userPieceFactory = require('local_modules/models/user_piece/factory');

  pieceFactory = require('local_modules/models/piece/factory');

  userFactory = require('local_modules/models/user/factory');

  tempUserFactory = require('local_modules/models/temp_user/factory');

  guitarQuestUrl = settings.server.url;

  superAgentRequest = require('superagent-bluebird-promise');

  describe('/users', function() {
    beforeEach(database.reset);
    before(function(done) {
      return this.serverUp(done);
    });
    after(function(done) {
      return this.serverDown(done);
    });
    describe('POST /login', function() {
      describe('validation', function() {
        it('validates email', function() {
          return request.postPromised(guitarQuestUrl + "/users/login", {
            json: {
              email: 'bream',
              password: '1234abcde!'
            }
          }).spread(function(response) {
            expect(response).to.have.property('statusCode', 400);
            return expect(response.body).to.equal('invalid email');
          });
        });
        return it('validates password', function() {
          return request.postPromised(guitarQuestUrl + "/users/login", {
            json: {
              email: 'bream@gmail.com',
              password: ''
            }
          }).spread(function(response) {
            expect(response).to.have.property('statusCode', 400);
            return expect(response.body).to.equal('invalid password');
          });
        });
      });
      return it('logs in to existing account', function() {
        return this.authenticate().then(function(arg) {
          var newAgent;
          this.request = arg[0], this.user = arg[1];
          return newAgent = superAgentRequest.agent().post(guitarQuestUrl + "/users/login").send({
            email: 'julian.bream@Gmail.com',
            password: '1234abc!'
          });
        }).then(function(response) {
          expect(response).to.have.property('statusCode', 200);
          return expect(response.body.email).to.equal('Julian.Bream+guitarquest@Gmail.com');
        });
      });
    });
    describe('POST /register', function() {
      describe('validation', function() {
        it('validates firstName', function() {
          return request.postPromised(guitarQuestUrl + "/users/register", {
            json: {
              firstName: '',
              lastName: 'Bream',
              email: 'bream@gmail.com',
              password: '1234abcde!'
            }
          }).spread(function(response) {
            expect(response).to.have.property('statusCode', 400);
            return expect(response.body).to.equal('invalid firstName');
          });
        });
        it('validates lastName', function() {
          return request.postPromised(guitarQuestUrl + "/users/register", {
            json: {
              firstName: 'Julian',
              lastName: '',
              email: 'bream@gmail.com',
              password: '1234abcde!'
            }
          }).spread(function(response) {
            expect(response).to.have.property('statusCode', 400);
            return expect(response.body).to.equal('invalid lastName');
          });
        });
        it('validates email', function() {
          return request.postPromised(guitarQuestUrl + "/users/register", {
            json: {
              firstName: 'Julian',
              lastName: 'Bream',
              email: 'bream',
              password: '1234abcde!'
            }
          }).spread(function(response) {
            expect(response).to.have.property('statusCode', 400);
            return expect(response.body).to.equal('invalid email');
          });
        });
        return it('validates password', function() {
          return request.postPromised(guitarQuestUrl + "/users/register", {
            json: {
              firstName: 'Julian',
              lastName: 'Bream',
              email: 'bream@gmail.com',
              password: '1234'
            }
          }).spread(function(response) {
            expect(response).to.have.property('statusCode', 400);
            return expect(response.body).to.equal('password must be at least 8 characters long');
          });
        });
      });
      it('creates a temporary user', function() {
        return request.postPromised(guitarQuestUrl + "/users/register", {
          json: {
            firstName: 'Julian',
            lastName: 'Bream',
            email: 'Bream+promotions@Gmail.com',
            password: '1234abc!'
          }
        }).spread(function(response) {
          expect(response).to.have.property('statusCode', 201);
          expect(response.body).to.deep.equal({});
          return TempUser.find();
        }).then(function(users) {
          return TempUser.find({
            emailId: 'bream@gmail.com'
          });
        }).then(function(tempUsers) {
          var tempUser;
          expect(tempUsers).to.have.length(1);
          tempUser = _.first(tempUsers);
          expect(tempUser).to.have.property('firstName', 'Julian');
          expect(tempUser).to.have.property('lastName', 'Bream');
          expect(tempUser).to.have.property('email', 'Bream+promotions@Gmail.com');
          return expect(tempUser).to.have.property('emailId', 'bream@gmail.com');
        });
      });
      it('responds 400 if user already exists', function() {
        return this.authenticate().then(function(arg) {
          var _, user;
          _ = arg[0], user = arg[1];
          return request.postPromised(guitarQuestUrl + "/users/register", {
            json: {
              firstName: 'Julian',
              lastName: 'Bream',
              email: user.email,
              password: '1234abc!'
            }
          });
        }).spread(function(response) {
          expect(response).to.have.property('statusCode', 400);
          return expect(response.body).to.equal('user already exists');
        });
      });
      return it('creates a new temp user if one already exists', function() {
        var originalTempUserId, tempUser;
        originalTempUserId = null;
        tempUser = tempUserFactory.create();
        return TempUser.create(tempUser).then(function(tempUser) {
          originalTempUserId = tempUser._id.toString();
          tempUser.emailId = 'bream@gmail.com';
          return tempUser.save();
        }).then(function() {
          return request.postPromised(guitarQuestUrl + "/users/register", {
            json: {
              firstName: 'Julian',
              lastName: 'Bream',
              email: 'Bream+promotions@Gmail.com',
              password: '1234abc!'
            }
          });
        }).spread(function(response) {
          expect(response).to.have.property('statusCode', 201);
          expect(response.body).to.deep.equal({});
          return TempUser.findOne({
            emailId: 'bream@gmail.com'
          });
        }).then(function(tempUser) {
          return expect(tempUser.emailId.toString()).not.to.equal(originalTempUserId.toString());
        });
      });
    });
    return describe('POST /confirm/:tempUserId', function() {
      it('validates', function() {
        return request.postPromised(guitarQuestUrl + "/users/confirm/bam", {
          json: true
        }).spread(function(response) {
          expect(response).to.have.property('statusCode', 400);
          return expect(response.body).to.equal('invalid tempUserId');
        });
      });
      return it('creates an account', function() {
        var originalTempUser;
        originalTempUser = null;
        return request.postPromised(guitarQuestUrl + "/users/register", {
          json: {
            firstName: 'Julian',
            lastName: 'Bream',
            email: 'Bream+promotions@Gmail.com',
            password: '1234abc!'
          }
        }).spread(function(response) {
          expect(response).to.have.property('statusCode', 201);
          expect(response.body).to.deep.equal({});
          return TempUser.find({
            emailId: 'bream@gmail.com'
          }).select('firstName lastName email hash salt').exec();
        }).then(function(tempUsers) {
          expect(tempUsers).to.have.length(1);
          originalTempUser = _.first(tempUsers);
          return request.postPromised(guitarQuestUrl + "/users/confirm/" + (_.first(tempUsers)._id), {
            json: true
          });
        }).spread(function(response) {
          var returnedUser;
          expect(response).to.have.property('statusCode', 201);
          returnedUser = response.body;
          expect(returnedUser).not.to.have.property('hash');
          expect(returnedUser).not.to.have.property('salt');
          return Promise.props({
            user: User.findById(returnedUser._id).select('firstName lastName email emailId hash salt').exec(),
            updatedTempUser: TempUser.find({
              emailId: 'bream@gmail.com'
            })
          });
        }).then(function(arg) {
          var updatedTempUser, user;
          user = arg.user, updatedTempUser = arg.updatedTempUser;
          expect(updatedTempUser).to.deep.equal([]);
          expect(user).to.have.property('firstName', 'Julian');
          expect(user).to.have.property('lastName', 'Bream');
          expect(user).to.have.property('email', 'Bream+promotions@Gmail.com');
          expect(user).to.have.property('emailId', 'bream@gmail.com');
          expect(user).to.have.property('hash', originalTempUser.hash);
          return expect(user).to.have.property('salt', originalTempUser.salt);
        });
      });
    });
  });

}).call(this);
