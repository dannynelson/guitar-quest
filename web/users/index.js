// Generated by CoffeeScript 1.10.0
(function() {
  var Notification, Promise, TempUser, User, _, joi, normalizeEmail, passport, resourceConverter, router, sendgrid, settings, stripe;

  _ = require('lodash');

  Promise = require('bluebird');

  settings = require('local_modules/settings');

  joi = require('joi');

  joi.objectId = require('joi-objectid')(joi);

  User = require('local_modules/models/user');

  Notification = require('local_modules/models/notification');

  TempUser = require('local_modules/models/temp_user');

  passport = require('local_modules/passport');

  stripe = require('local_modules/stripe');

  sendgrid = require('local_modules/sendgrid');

  resourceConverter = require('./resource_converter');

  normalizeEmail = require('normalize-email');

  module.exports = router = require('express').Router();

  router.get('/card', function(req, res, next) {
    var user;
    user = req.user;
    if (req.user == null) {
      return res.status(401).send('unauthorized');
    }
    if (!user.stripeId) {
      return res.status(404).send('No credit card available');
    }
    return stripe.customers.retrieve(user.stripeId).then(function(customer) {
      var card, ref;
      card = _.first((ref = customer.sources) != null ? ref.data : void 0);
      if (card != null) {
        return res.send(card);
      } else {
        return res.status(404).send('no card available for user');
      }
    }).then(null, next);
  });

  router.get('/', resourceConverter.get(), resourceConverter.send);

  router.get('/:_id', resourceConverter.get('_id'), resourceConverter.send);

  router.put('/:_id', resourceConverter.put('_id'), resourceConverter.send);

  router.post('/register', function(req, res, next) {
    if (joi.validate(req.body.firstName, joi.string().min(1).required()).error) {
      return res.status(400).send('invalid firstName');
    }
    if (joi.validate(req.body.lastName, joi.string().min(1).required()).error) {
      return res.status(400).send('invalid lastName');
    }
    if (joi.validate(req.body.email, joi.string().email().required()).error) {
      return res.status(400).send('invalid email');
    }
    if (joi.validate(req.body.password, joi.string().min(8).required()).error) {
      return res.status(400).send('password must be at least 8 characters long');
    }
    return Promise.all([
      User.findOne({
        emailId: normalizeEmail(req.body.email)
      }), TempUser.findOne({
        emailId: normalizeEmail(req.body.email)
      })
    ]).then(function(arg) {
      var tempUser, user;
      user = arg[0], tempUser = arg[1];
      if (user != null) {
        return res.status(400).send('user already exists');
      }
      return Promise["try"]((function(_this) {
        return function() {
          if (tempUser != null) {
            return tempUser.remove();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          var registerPromised;
          tempUser = new TempUser({
            firstName: req.body.firstName,
            lastName: req.body.lastName,
            email: req.body.email,
            emailId: normalizeEmail(req.body.email)
          });
          registerPromised = Promise.promisify(TempUser.register).bind(TempUser);
          return registerPromised(tempUser, req.body.password);
        };
      })(this)).then(function(tempUser) {
        sendgrid.send({
          to: tempUser.email,
          from: settings.guitarQuestEmail,
          subject: 'Confirm GuitarQuest Email',
          html: "Hello " + tempUser.firstName + ",<br><br> Welcome to GuitarQuest! Click the link below to confirm your email.<br> " + settings.server.url + "/#/confirm_email?id=" + tempUser._id + "<br><br> Thanks,<br> The GuitarQuest Team"
        });
        return res.status(201).send({});
      });
    }).then(null, next);
  });

  router.post('/confirm/:tempUserId', function(req, res, next) {
    if (joi.validate(req.params.tempUserId, joi.objectId().required()).error) {
      return res.status(400).send('invalid tempUserId');
    }
    return TempUser.findById(req.params.tempUserId).select('firstName lastName email emailId hash salt').exec().then(function(tempUser) {
      var user;
      if (!tempUser) {
        return res.send({});
      }
      user = new User(tempUser);
      return Promise.all([user.save(), tempUser.remove()]);
    }).tap(function(arg) {
      var reqLoginPromised, user;
      user = arg[0];
      reqLoginPromised = Promise.promisify(req.login).bind(req);
      return reqLoginPromised(user);
    }).then(function() {
      return resourceConverter.createResourceFromModel(req.user, {
        req: req,
        res: res,
        next: next
      });
    }).then(function(resource) {
      return res.status(201).send(resource);
    }).then(null, next);
  });

  router.post('/login', function(req, res, next) {
    if (joi.validate(req.body.email, joi.string().email().required()).error) {
      return res.status(400).send('invalid email');
    }
    if (joi.validate(req.body.password, joi.string().min(1).required()).error) {
      return res.status(400).send('invalid password');
    }
    req.body.emailId = normalizeEmail(req.body.email);
    return next();
  }, passport.authenticate('local'), function(req, res, next) {
    return resourceConverter.createResourceFromModel(req.user, {
      req: req,
      res: res,
      next: next
    }).then(function(resource) {
      return res.status(200).send(resource);
    }).then(null, function(err) {
      return next(err);
    });
  });

  router.post('/logout', function(req, res) {
    req.logout();
    return res.status(200).send('Logout successful');
  });

  router.post('/save_card', function(req, res, next) {
    var stripeCustomer, user;
    stripeCustomer = null;
    user = req.user;
    if (req.user == null) {
      return res.status(401).send('unauthorized');
    }
    if (req.body.stripeToken == null) {
      return res.status(400).send('stripeToken required');
    }
    return Promise["try"](function() {
      if (req.user.stripeId != null) {
        return stripe.customers.listCards(req.user.stripeId).then(function(cards) {
          return Promise.map(cards.data, function(card) {
            return stripe.customers.deleteCard(req.user.stripeId, card.id);
          });
        }).then(function() {
          return stripe.customers.createSource(req.user.stripeId, {
            source: req.body.stripeToken
          });
        });
      } else {
        return stripe.customers.create({
          source: req.body.stripeToken,
          description: req.user._id.toString()
        }).then(function(customer) {
          user.stripeId = customer.id;
          return user.save();
        }).then(function() {
          var card;
          return card = _.first(stripeCustomer.sources.data);
        });
      }
    }).then(function(card) {
      return res.status(201).send(card);
    }).then(null, next);
  });

  router.post('/subscribe', function(req, res, next) {
    var ref, user;
    user = req.user;
    if (req.user == null) {
      return res.status(401).send('unauthorized');
    }
    if (((ref = req.user) != null ? ref.stripeId : void 0) == null) {
      return res.status(400).send('User does not have a credit card associated with account');
    }
    return stripe.customers.createSubscription(req.user.stripeId, {
      plan: settings.subscription.id
    }).then(function(subscription) {
      user.roles.push('subscriber');
      return user.save();
    }).then(function(user) {
      return resourceConverter.createResourceFromModel(user, {
        req: req,
        res: res,
        next: next
      });
    }).then((function(_this) {
      return function(resource) {
        return res.status(200).send(resource);
      };
    })(this)).then(null, next);
  });

  router.post('/change_password', function(req, res, next) {
    var newPassword, oldPassword, ref, user;
    ref = req.body, oldPassword = ref.oldPassword, newPassword = ref.newPassword;
    user = req.user;
    return user.authenticate(oldPassword, function(err) {
      if (err) {
        return next(err);
      }
      return user.setPassword(newPassword, function(err, user) {
        if (err) {
          return next(err);
        }
        return user.save().then((function(_this) {
          return function() {
            return resourceConverter.createResourceFromModel(user, {
              req: req,
              res: res,
              next: next
            });
          };
        })(this)).then((function(_this) {
          return function(resource) {
            return res.status(200).send(resource);
          };
        })(this));
      });
    });
  });

  router.post('/mark_all_notifications_read', function(req, res, next) {
    var user;
    user = req.user;
    if (req.user == null) {
      return res.status(401).send('unauthorized');
    }
    return Notification.find({
      userId: user._id,
      isRead: {
        $ne: true
      }
    }).then(function(notifications) {
      return notifications.forEach(function(notification) {
        notification.isRead = true;
        return notification.save();
      });
    }).then(function() {
      return res.send(200, {});
    }).then(null, next);
  });

  router.post('/assert_logged_in', function(req, res, next) {
    console.log('TEST', req.user)
    if (req.user == null) {
      return res.status(401).send({
        message: 'Not Logged In'
      });
    } else {
      return resourceConverter.createResourceFromModel(req.user, {
        req: req,
        res: res,
        next: next
      }).then(function(resource) {
        return res.status(200).send(resource);
      }).then(null, function(err) {
        return next(err);
      });
    }
  });

}).call(this);
